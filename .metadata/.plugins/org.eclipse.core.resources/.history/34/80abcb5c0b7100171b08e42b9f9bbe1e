package zaaviyah;

public class Operators {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

//		
//		
//		String binary[] = {
//				"0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111",
//				"1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"
//				};
//				int a = 3; // 0 + 2 + 1 or 0011 in binary
//				int b = 6; // 4 + 2 + 0 or 0110 in binary
//				int c = a | b;
//				int d = a & b;
//				int e = a ^ b;
//				int f = (~a & b)|(a & ~b);
//				int g = ~a & 0x0f;
//				System.out.println(" a = " + binary[a]);
//				System.out.println(" b = " + binary[b]);
//				System.out.println(" a|b = " + binary[c]);
//				System.out.println(" a&b = " + binary[d]);
//				System.out.println(" a^b = " + binary[e]);
//				System.out.println("~a&b|a&~b = " + binary[f]);
//				System.out.println(" ~a = " + binary[g]);
//				
				//////////////////////// Left shifting as a quick way to multiply by 2.
//		
				
//				int i ;
//				int num = 0xFFFFFF;
//				for ( i =0; i <4; i++) {
//					num = num <<1;
//					System.out.println (num);
//				}
				
		
		////////////////////////// Masking sign extension.////////////////
//		char hex[] = {
//		'0', '1', '2', '3', '4', '5', '6', '7',
//		'8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
//		};
//		byte b = (byte) 0xf1;
//		System.out.println("b = 0x" + hex[(b >> 4) & 0x0f] + hex[b & 0x0f]);
//				
		
		
		
		
		
	//////////////////////////////	Bitwise Operator Compound Assignments
		
		
//		int a = 1;
//		int b = 2;
//		int c = 3;
//		a |= 4;
//		b >>= 1;
//		c <<= 1;
//		a ^= c;
//		System.out.println("a = " + a);
//		System.out.println("b = " + b);
//		System.out.println("c = " + c);
//		
//		int a = 1;
//		int b = 3;
//		int c = 4;
//		a|= 4;
//		b>>= 1;
//		c<<=1;
//		a^= c;
//		System.out.println("a =" +a) ;
//		System.out.println("a =" +b) ;
//		System.out.println("a =" +c) ;
		
		
		///////////////////////////////Relational Operators.//////////////////////////////////
		
		
//		Operator Result
//		== Equal to
//		!= Not equal to
//		> Greater than
//		< Less than
//		>= Greater than or equal to
//		<= Less than or equal to
		
//		
//		Boolean Logical Operators
//		The Boolean logical operators shown here operate only on boolean operands. All of the
//		binary logical operators combine two boolean values to form a resultant boolean value
		
//		
//		Operator Result
//		& Logical AND
//		| Logical OR
//		^ Logical XOR (exclusive OR)
//		|| Short-circuit OR
//		&& Short-circuit AND
//		! Logical unary NOT
//		&= AND assignment
//		|= OR assignment
//		^= XOR assignment
//		== Equal to
//		!= Not equal to
//		?: Ternary if-then-else
		
//		
//		A B A | B A & B A ^ B !A
//		False False False False False True
//		True False True False True False
//		False True True False True True
//		True True True True False False
		
//		
//	
//		boolean a = true ;
//		boolean b = false ;
//		boolean c = a|b ;
//		boolean d = a& b;
//		boolean e = a^ b;
//		boolean f = (!a & b) | ( a& b);
//		
//		
//		boolean g = !a;
//		
//		System.out.println("a =" +a);
//		System.out.println("b =" +b);
//		System.out.println("c =" +c);
//		System.out.println("d =" +d);
//		System.out.println("e =" +e);
//		
		
	}

}
